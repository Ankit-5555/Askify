<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Askify - Interview Started</title>
  <link rel="shortcut icon" href="https://images.icon-icons.com/4152/PNG/512/network_videoconference_monitor_digital_interview_icon_261457.png" type="image/x-icon">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body {
      background: linear-gradient(to right, #e0f7fa, #ffffff);
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      transition: all 0.5s;
    }
    main {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      animation: fadeIn 0.8s ease;
      padding: 30px 15px;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .card {
      padding: 20px;
      border-radius: 15px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
      background: #fff;
      width: 100%;
      max-width: 800px;
    }
    video {
      max-width: 100%;
      height: auto;
      border-radius: 10px;
    }
    #chatBox {
      height: 300px;
      overflow-y: auto;
      background: #f8f9fa;
      border-radius: 8px;
    }
    .btn {
      transition: all 0.3s;
    }
    .btn:hover {
      transform: scale(1.05);
    }
  </style>
</head>

<body class="d-flex flex-column min-vh-100">

  <%- include('partials/header') %>

  <main>
    <div class="card text-center">
      <h2>Interview Started for <span class="text-primary"><%= username %></span></h2>
      <p class="lead">Topic: <strong><%= topic %></strong></p>

      <div class="my-3">
        <button class="btn btn-success" onclick="startCamera()">🎥 Start Interview (Camera On)</button>
        <a href="/" class="btn btn-secondary ms-2">Back to Home</a>
      </div>

      <div class="mb-4">
        <video id="videoPreview" width="320" height="240" autoplay muted class="border shadow"></video>
      </div>

      <h4>Interview Chat</h4>
      <div id="chatBox" class="p-3 text-start"></div>

      <div class="input-group mt-3">
        <input type="text" id="userAnswer" class="form-control" placeholder="Type your answer...">
        <button class="btn btn-primary" onclick="submitAnswer()">Send</button>
        <button class="btn btn-info" onclick="startListening()">🎤 Speak</button>
      </div>

      <div class="mt-3">
        <button class="btn btn-success d-none" id="nextBtn" onclick="loadNextQuestion()">Next Question</button>
        <button class="btn btn-warning" onclick="downloadChat()">📥 Download Chat</button>
      </div>
    </div>
  </main>

  <%- include('partials/footer') %>

  <script>
    let questions = [
      "Tell me about yourself.",
      "Why did you choose this topic?",
      "What is your strength?",
      "Where do you see yourself in 5 years?",
      "Why should we hire you?"
    ];
    let currentQuestion = 0;
    let chatHistory = [];
    let selectedVoice = null;

    function startCamera() {
      navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then(stream => {
          document.getElementById('videoPreview').srcObject = stream;
          alert('✅ Camera & Mic Access Granted!');
        })
        .catch(err => {
          alert('❌ Access Denied: ' + err.message);
        });
    }

    function loadVoices() {
      const voices = speechSynthesis.getVoices();
      selectedVoice = voices.find(v => v.name.toLowerCase().includes('female')) || voices.find(v => v.lang.includes('en')) || voices[0];
    }

    function speakQuestion(text) {
      const utter = new SpeechSynthesisUtterance(text);
      if (selectedVoice) utter.voice = selectedVoice;
      speechSynthesis.speak(utter);
    }

    function addMessage(sender, message) {
      const chatBox = document.getElementById('chatBox');
      const msgDiv = document.createElement('div');
      msgDiv.innerHTML = `<strong>${sender}:</strong> ${message}`;
      chatBox.appendChild(msgDiv);
      chatBox.scrollTop = chatBox.scrollHeight;
      chatHistory.push(`${sender}: ${message}`);
    }

    function startInterview() {
      addMessage('AI', questions[currentQuestion]);
      speakQuestion(questions[currentQuestion]);
    }

    function submitAnswer() {
      const userAnswer = document.getElementById('userAnswer').value.trim();
      if (!userAnswer) return;
      addMessage('You', userAnswer);
      document.getElementById('userAnswer').value = '';
      document.getElementById('nextBtn').classList.remove('d-none');
    }

    function loadNextQuestion() {
      currentQuestion++;
      if (currentQuestion < questions.length) {
        addMessage('AI', questions[currentQuestion]);
        speakQuestion(questions[currentQuestion]);
        document.getElementById('nextBtn').classList.add('d-none');
      } else {
        addMessage('AI', 'Thank you for your time! Interview Ended.');
        speakQuestion('Thank you for your time! Interview Ended.');
        document.getElementById('nextBtn').classList.add('d-none');
      }
    }

    function downloadChat() {
      const blob = new Blob([chatHistory.join('\n')], { type: 'text/plain' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = 'interview_chat.txt';
      link.click();
    }

    function startListening() {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (!SpeechRecognition) {
        alert('❌ Speech Recognition not supported in this browser.');
        return;
      }
      const recognition = new SpeechRecognition();
      recognition.lang = 'en-US';
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;
      recognition.start();
      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        document.getElementById('userAnswer').value = transcript;
        addMessage('You (Spoken)', transcript);
        document.getElementById('nextBtn').classList.remove('d-none');
      };
      recognition.onerror = (event) => {
        console.error('Speech Recognition Error:', event.error);
      };
    }

    window.speechSynthesis.onvoiceschanged = () => {
      loadVoices();
      startInterview();
    };
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
